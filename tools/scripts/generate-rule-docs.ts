import type { TSESLint } from '@typescript-eslint/experimental-utils';
import { readdirSync, readFileSync, writeFileSync } from 'fs';
import { compile } from 'json-schema-to-typescript';
import traverse from 'json-schema-traverse';
import { join, relative } from 'path';
import { format, resolveConfig } from 'prettier';
import ts from 'typescript';
import { SPECIAL_UNDERLINE_CHARS } from '../../packages/utils/src/convert-annotated-source-to-failure-case';

const plugin = process.argv[2];

if (!['eslint-plugin-template', 'eslint-plugin'].includes(plugin)) {
  console.error(
    `\nError: the first argument to the script must be "eslint-plugin-template" or "eslint-plugin"`,
  );
  process.exit(1);
}

const docsOutputDir = join(__dirname, `../../packages/${plugin}/docs/rules`);
const rulesDir = join(__dirname, `../../packages/${plugin}/src/rules`);
const ruleFiles = readdirSync(rulesDir);
const testDirsDir = join(__dirname, `../../packages/${plugin}/tests/rules`);
const testDirs = readdirSync(testDirsDir);

async function main() {
  const allRuleData = await generateAllRuleData();

  for (const [ruleName, ruleData] of Object.entries(allRuleData)) {
    const {
      ruleConfig: {
        meta: { deprecated, replacedBy, type, fixable, schema, hasSuggestions },
        defaultOptions,
      },
      ruleFilePath,
      testCasesFilePath,
    } = ruleData;

    const docs = ruleData.ruleConfig.meta.docs as TSESLint.RuleMetaDataDocs;
    const { description } = docs;

    let schemaAsInterface = '';
    if (Array.isArray(schema) && schema[0]) {
      traverse(schema[0], {
        allKeys: true,
        cb: (...data) => {
          const [schemaNode, , , , , , keyIndex] = data;

          let defaultValue = null;

          if (typeof schemaNode.default !== 'undefined') {
            defaultValue = schemaNode.default;
          } else if (defaultOptions?.length) {
            for (const defaultOption of defaultOptions) {
              const defaultValueForNode = defaultOption[keyIndex as string];
              if (defaultValueForNode) {
                defaultValue = defaultValueForNode;
              }
            }
          }

          if (defaultValue) {
            if (schemaNode.description) {
              schemaNode.description += '\n\n';
            } else {
              schemaNode.description = '';
            }
            const serializedDefaultValue = JSON.stringify(defaultValue);
            schemaNode.description += `Default: \`${serializedDefaultValue}\``;
            return;
          }
        },
      });

      schemaAsInterface = await compile(schema[0], 'Options', {
        bannerComment: '',
      });
      schemaAsInterface = schemaAsInterface.replace('export ', '');
    }

    const fullRuleName = `@angular-eslint/${
      plugin === 'eslint-plugin-template' ? 'template/' : ''
    }${ruleName}`;

    const md = `
<!--

  DO NOT EDIT.

  This markdown file was autogenerated using a mixture of the following files as the source of truth for its data:
  - ${relative(docsOutputDir, ruleFilePath)}
  - ${relative(docsOutputDir, testCasesFilePath)}

  In order to update this file, it is therefore those files which need to be updated, as well as potentially the generator script:
  - ${relative(docsOutputDir, __filename)}

-->

<br>

# \`${fullRuleName}\`

${
  deprecated
    ? `## ‚ö†Ô∏è THIS RULE IS DEPRECATED\n\nPlease use ${(replacedBy || [])
        .map(
          (r: string) =>
            `\`@angular-eslint/${
              plugin === 'eslint-plugin-template' ? 'template/' : ''
            }${r}\``,
        )
        .join(', ')} instead.\n\n---\n\n`
    : ''
}${description}

- Type: ${type}
${
  fixable === 'code'
    ? '- üîß Supports autofix (`--fix`)\n'
    : ''
}
${
  hasSuggestions
    ? '- üí° Provides suggestions on how to fix issues (https://eslint.org/docs/developer-guide/working-with-rules#providing-suggestions)'
    : ''
}

<br>

## Rule Options

${
  schemaAsInterface
    ? `
The rule accepts an options object with the following properties:

\`\`\`ts
${schemaAsInterface}
\`\`\`
`
    : 'The rule does not have any configuration options.'
}

<br>

## Usage Examples

> The following examples are generated automatically from the actual unit tests within the plugin, so you can be assured that their behavior is accurate based on the current commit.

<br>

<details>
<summary>‚ùå - Toggle examples of <strong>incorrect</strong> code for this rule</summary>

${convertCodeExamplesToMarkdown(
  ruleData.invalid,
  'invalid',
  plugin === 'eslint-plugin-template' ? 'html' : 'ts',
  fullRuleName,
)}

</details>

<br>

---

<br>

<details>
<summary>‚úÖ - Toggle examples of <strong>correct</strong> code for this rule</summary>

${convertCodeExamples
